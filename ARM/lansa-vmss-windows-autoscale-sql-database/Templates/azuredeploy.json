{
   "$schema": "http://schema.management.azure.com/schemas/2015-01-01-preview/deploymentTemplate.json",
   "contentVersion": "1.0.0.0",
   "parameters": {
      "msiUri": {
         "type": "string",
         "defaultValue": "https://lansalpcmsdn.blob.core.windows.net/app/test/AWAMAPP_v14.1.2_en-us.msi",
         "metadata": {
            "description": "URL of the LANSA MSI to install on each VM."
         }
      },
      "vmSku": {
         "type": "string",
         "defaultValue": "Standard_A2",
         "metadata": {
            "description": "Size of VMs in the VM Scale Set."
         }
      },
      "vmssName": {
         "type": "string",
         "metadata": {
            "description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
         },
         "maxLength": 61
      },
      "minInstanceCount": {
         "type": "int",
         "defaultValue": 1,
         "metadata": {
            "description": "Minimum number of VM instances (1 or more)."
         },
         "minValue": 1
      },
      "maxInstanceCount": {
         "type": "int",
         "defaultValue": 100,
         "metadata": {
            "description": "Maximum number of VM instances (100 or less)."
         },
         "maxValue": 100
      },
      "databaseName": {
         "type": "string",
         "defaultValue": "lansa",
         "metadata": {
            "description": "The name of the new database to create."
         }
      },
      "collation": {
         "type": "string",
         "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
         "metadata": {
            "description": "The database collation for governing the proper use of characters."
         }
      },
      "edition": {
         "type": "string",
         "defaultValue": "Standard",
         "allowedValues": [
            "Basic",
            "Standard",
            "Premium"
         ],
         "metadata": {
            "description": "The type of database to create."
         }
      },
      "requestedServiceObjectiveName": {
         "type": "string",
         "defaultValue": "S2",
         "allowedValues": [
            "Basic",
            "S0",
            "S1",
            "S2",
            "S3",
            "P1",
            "P2",
            "P4",
            "P6",
            "P11",
            "P15"
         ],
         "metadata": {
            "description": "Describes the performance level for Edition"
         }
      },
      "maxSizeBytes": {
         "type": "string",
         "defaultValue": "1073741824",
         "metadata": {
            "description": "The maximum size, in bytes, for the database"
         }
      },
      "adminUsername": {
         "type": "string",
         "defaultValue": "lansa",
         "metadata": {
            "description": "Admin username on all VMs."
         }
      },
      "adminPassword": {
         "type": "securestring",
         "metadata": {
            "description": "Admin password on all VMs."
         }
      },
      "webUsername": {
         "type": "string",
         "defaultValue": "Pcxuser2",
         "metadata": {
            "description": "Web Server username on all VMs."
         }
      },
      "webPassword": {
         "type": "securestring",
         "metadata": {
            "description": "Web Server password on all VMs."
         }
      },
      "databaseLogin": {
         "type": "string",
         "defaultValue": "lansa",
         "metadata": {
            "description": "The admin user of the Azure SQL Database"
         }
      },
      "databaseLoginPassword": {
         "type": "securestring",
         "metadata": {
            "description": "The password of the admin user of the Azure SQL Database"
         }

      },
      "webServerMaxConnect": {
         "type": "string",
         "defaultValue": "20",
         "metadata": {
            "description": "The maximum number of LANSA jobs to run on each Web Server. Setting triggerWebConfig will cause this value to be updated."
         }
      },
      "installMSI": {
         "type": "string",
         "defaultValue": "0",
         "metadata": {
            "description": "Install the MSI: Set this to 1 to execute an MSI install. Usually set to 0 when updating the stack"
         }
      },
      "updateMSI": {
         "type": "string",
         "defaultValue": "0",
         "metadata": {
            "description": "Update Stack: Set this to 1 to execute an MSI Upgrade. Obtains the specified MSI and installs it. Ensure the LansaMSI parameter is set correctly. If the LansaMSI parameter is not different a repair will be performed"
         }
      },
      "uninstallMSI": {
         "type": "string",
         "defaultValue": "0",
         "metadata": {
            "description": "Uninstall the MSI: Set this to 1 to uninstall the MSI. The MSI used to uninstall is the last one that was installed. It is called c:\\lansa\\MyApp.msi"
         }
      },
      "triggerWebConfig": {
         "type": "string",
         "defaultValue": "0",
         "metadata": {
            "description": "Update Stack: Set this to 1  to update the web configuration"
         }
      },
      "imageOffer": {
         "type": "string",
         "defaultValue": "lansa-scalable-license",
         "allowedValues": [
            "lansa-scalable-license",
            "lansa-scalable-license-preview"
         ],
         "metadata": {
            "description": "The offer of the image. Allowed values: lansa-scalable-license, lansa-scalable-license-preview"
         }
      },
      "gitBranch": {
         "type": "string",
         "defaultValue": "support/L4W14000_scalable_azure"
      },
      "trace": {
         "type": "string",
         "defaultValue": "N",
         "allowedValues": [
            "Y",
            "N"
         ],
         "metadata": {
            "description": "Switch tracing on. Allowed values Y or N"
         }
      },
      "fixLicense": {
         "type": "string",
         "defaultValue": "0",
         "metadata": {
            "description": "Re-run licensing"
         }
      }
   },
  "variables": {
    "storageAccountType": "Standard_LRS",
    "namingInfix": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
    "longNamingInfix": "[toLower(parameters('vmssName'))]",
    "dblongNamingInfix": "[toLower(concat('db',parameters('vmssName')))]",
    "dbvmssName": "[toLower(substring(concat('db',parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
    "newStorageAccountSuffix": "[concat(variables('namingInfix'), 'sa')]",
    "uniqueStringArray": [
      "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '0')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '1')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '2')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '3')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '4')))]"
    ],
    "saCount": "[length(variables('uniqueStringArray'))]",
    "vhdContainerName": "[concat(variables('namingInfix'), 'vhd')]",
    "osDiskName": "[concat(variables('namingInfix'), 'osdisk')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "virtualNetworkName": "[concat(variables('namingInfix'), 'vnet')]",
    "publicIPAddressName": "[concat(variables('namingInfix'), 'pip')]",
    "dbpublicIPAddressName": "[concat(variables('namingInfix'), 'dbpip')]",
    "subnetName": "[concat(variables('namingInfix'), 'subnet')]",
    "loadBalancerName": "[concat(variables('namingInfix'), 'lb')]",
    "dbloadBalancerName": "[concat(variables('namingInfix'), 'dblb')]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "dbpublicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('dbpublicIPAddressName'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "dblbID": "[resourceId('Microsoft.Network/loadBalancers',variables('dbloadBalancerName'))]",
    "natPoolName": "[concat(variables('namingInfix'), 'natpool')]",
    "dbnatPoolName": "[concat(variables('namingInfix'), 'dbnatpool')]",
    "bePoolName": "[concat(variables('namingInfix'), 'bepool')]",
    "dbbePoolName": "[concat(variables('namingInfix'), 'dbbepool')]",
    "dbvmSku": "Standard_A1",
    "natStartPort": 50000,
    "natEndPort": 50119,
    "natBackendPort": 3389,
    "nicName": "[concat(variables('namingInfix'), 'nic')]",
    "ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "imagePublisher": "lansa",
    "imageSku": "lansa-scalable-license-14-1",
    "osType": {
      "publisher": "[variables('imagePublisher')]",
      "offer": "[parameters('imageOffer')]",
      "sku": "[variables('imageSku')]",
      "version": "latest"
    },
    "imageReference": "[variables('osType')]",
    "diagnosticsStorageAccountName": "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'))), variables('newStorageAccountSuffix') )]",
    "diagnosticsStorageAccountResourceGroup": "[resourceGroup().name]",
    "accountid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',variables('diagnosticsStorageAccountResourceGroup'),'/providers/','Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
    "wadlogs": "<WadCfg> <DiagnosticMonitorConfiguration overallQuotaInMB=\"4096\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2010/10/DiagnosticsConfiguration\"> <DiagnosticInfrastructureLogs scheduledTransferLogLevelFilter=\"Error\"/> <WindowsEventLog scheduledTransferPeriod=\"PT1M\" > <DataSource name=\"Application!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"Security!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"System!*[System[(Level = 1 or Level = 2)]]\" /></WindowsEventLog>",
    "wadperfcounters1": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Processor Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU utilization\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Privileged Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU privileged time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% User Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor Information(_Total)\\Processor Frequency\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"CPU frequency\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\System\\Processes\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Processes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Thread Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Threads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Handle Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Handles\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\% Committed Bytes In Use\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory usage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Available Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Committed Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory committed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Commit Limit\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory commit limit\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
    "wadperfcounters2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Read Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Write Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Transfers/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Reads/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk read operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Writes/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk write operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Read Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Write Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\LogicalDisk(_Total)\\% Free Space\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk free space (percentage)\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
    "wadcfgxstart": "[concat(variables('wadlogs'),variables('wadperfcounters1'),variables('wadperfcounters2'),'<Metrics resourceId=\"')]",
    "wadmetricsresourceid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name ,'/providers/','Microsoft.Compute/virtualMachineScaleSets/',variables('namingInfix'))]",
    "wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",
    "computeApiVersion": "2016-03-30",
    "networkApiVersion": "2016-03-30",
    "storageApiVersion": "2015-06-15",
    "insightsApiVersion": "2015-04-01",
    "customScriptExtensionVersion":  "1.8",
    "sqlserverName": "[concat(variables('namingInfix'), 'sqlserver')]",
    "gitRepo": "https://raw.githubusercontent.com/robe070/cookbooks/",
    "gitRefreshName": "git-pull.ps1",
    "gitRefreshUri": "[concat(variables('gitRepo'), parameters('gitBranch'), '/scripts/', variables('gitRefreshName'))]"
  },
   "resources": [
      {
         "type": "Microsoft.Network/virtualNetworks",
         "name": "[variables('virtualNetworkName')]",
         "location": "[resourceGroup().location]",
         "apiVersion": "[variables('networkApiVersion')]",
         "properties": {
            "addressSpace": {
               "addressPrefixes": [
                  "[variables('addressPrefix')]"
               ]
            },
            "subnets": [
               {
                  "name": "[variables('subnetName')]",
                  "properties": {
                     "addressPrefix": "[variables('subnetPrefix')]"
                  }
               }
            ]
         }
      },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('uniqueStringArray')[copyIndex()], variables('newStorageAccountSuffix'))]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('storageApiVersion')]",
      "copy": {
        "name": "storageLoop",
        "count": "[variables('saCount')]"
      },
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
      {
         "type": "Microsoft.Storage/storageAccounts",
         "name": "[variables('diagnosticsStorageAccountName')]",
         "location": "[resourceGroup().location]",
         "apiVersion": "[variables('storageApiVersion')]",
         "properties": {
            "accountType": "[variables('storageAccountType')]"
         }
      },
      {
         "type": "Microsoft.Network/publicIPAddresses",
         "name": "[variables('publicIPAddressName')]",
         "location": "[resourceGroup().location]",
         "apiVersion": "[variables('networkApiVersion')]",
         "properties": {
            "publicIPAllocationMethod": "Dynamic",
            "dnsSettings": {
               "domainNameLabel": "[variables('longNamingInfix')]"
            }
         }
      },
      {
         "type": "Microsoft.Network/loadBalancers",
         "name": "[variables('loadBalancerName')]",
         "location": "[resourceGroup().location]",
         "apiVersion": "[variables('networkApiVersion')]",
         "dependsOn": [
            "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
         ],
         "properties": {
            "frontendIPConfigurations": [
               {
                  "name": "LoadBalancerFrontEnd",
                  "properties": {
                     "publicIPAddress": {
                        "id": "[variables('publicIPAddressID')]"
                     }
                  }
               }
            ],
            "backendAddressPools": [
               {
                  "name": "[variables('bePoolName')]"
               }
            ],
            "inboundNatPools": [
               {
                  "name": "[variables('natPoolName')]",
                  "properties": {
                     "frontendIPConfiguration": {
                        "id": "[variables('frontEndIPConfigID')]"
                     },
                     "protocol": "tcp",
                     "frontendPortRangeStart": "[variables('natStartPort')]",
                     "frontendPortRangeEnd": "[variables('natEndPort')]",
                     "backendPort": "[variables('natBackendPort')]"
                  }
               }
            ],
            "loadBalancingRules": [
               {
                  "name": "lbrule",
                  "properties": {
                     "frontendIPConfiguration": {
                        "id": "[variables('frontEndIPConfigID')]"
                     },
                     "backendAddressPool": {
                        "id": "[concat(variables('lbID'), '/backendAddressPools/', variables('bePoolName'))]"
                     },
                     "probe": {
                        "id": "[concat(variables('lbID'), '/probes/lbprobe')]"
                     },
                     "protocol": "Tcp",
                     "loadDistribution": "SourceIP",
                     "frontendPort": 80,
                     "backendPort": 80,
                     "idleTimeoutInMinutes": 15
                  }
               }
            ],
            "probes": [
               {
                  "name": "lbprobe",
                "properties": {
                  "protocol": "http",
                  "port": 80,
                  "intervalInSeconds": 15,
                  "timeoutInSeconds": 31,
                  "numberOfProbes": 2,
                  "requestPath": "cgi-bin/probe"
                }
               }
            ]
         }
      },
      {
         "type": "Microsoft.Network/publicIPAddresses",
         "name": "[variables('dbpublicIPAddressName')]",
         "location": "[resourceGroup().location]",
         "apiVersion": "[variables('networkApiVersion')]",
         "properties": {
            "publicIPAllocationMethod": "Dynamic",
            "dnsSettings": {
               "domainNameLabel": "[variables('dblongNamingInfix')]"
            }
         }
      },
      {
         "type": "Microsoft.Network/loadBalancers",
         "name": "[variables('dbloadBalancerName')]",
         "location": "[resourceGroup().location]",
         "apiVersion": "[variables('networkApiVersion')]",
         "dependsOn": [
            "[concat('Microsoft.Network/publicIPAddresses/', variables('dbpublicIPAddressName'))]"
         ],
         "properties": {
            "frontendIPConfigurations": [
               {
                  "name": "LoadBalancerFrontEnd",
                  "properties": {
                     "publicIPAddress": {
                        "id": "[variables('dbpublicIPAddressID')]"
                     }
                  }
               }
            ],
            "backendAddressPools": [
               {
                  "name": "[variables('dbbePoolName')]"
               }
            ],
            "loadBalancingRules": [
               {
                  "name": "lbrule",
                  "properties": {
                     "frontendIPConfiguration": {
                        "id": "[concat(variables('dblbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]"
                     },
                     "backendAddressPool": {
                        "id": "[concat(variables('dblbID'), '/backendAddressPools/', variables('dbbePoolName'))]"
                     },
                     "probe": {
                        "id": "[concat(variables('dblbID'), '/probes/lbprobe')]"
                     },
                     "protocol": "Tcp",
                     "loadDistribution": "SourceIP",
                     "frontendPort": 50000,
                     "backendPort": 3389,
                     "idleTimeoutInMinutes": 15
                  }
               }
            ],
            "probes": [
               {
                  "name": "lbprobe",
                  "properties": {
                      "protocol": "tcp",
                      "port": 3389,
                      "intervalInSeconds": 15,
                      "timeoutInSeconds": 31,
                      "numberOfProbes": 2
                  }
               }
            ]
         }
      },
      {
         "type": "Microsoft.Compute/virtualMachineScaleSets",
         "name": "[variables('dbvmssName')]",
         "location": "[resourceGroup().location]",
         "apiVersion": "[variables('computeApiVersion')]",
         "dependsOn": [
            "storageLoop",
            "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
            "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
            "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
            "[concat('Microsoft.Sql/servers/', variables('sqlserverName'))]",
            "[concat('Microsoft.Sql/servers/', variables('sqlserverName'), '/databases/', parameters('databaseName'))]"
         ],
         "sku": {
            "name": "[variables('dbvmSku')]",
            "tier": "Standard",
            "capacity": "1"
         },
         "plan": {
            "name": "[variables('imageSKU')]",
            "product": "[parameters('imageOffer')]",
            "publisher": "[variables('imagePublisher')]"
         },
         "properties": {
            "overprovision": "false",
            "upgradePolicy": {
               "mode": "Automatic"
            },
            "virtualMachineProfile": {
               "storageProfile": {
                  "osDisk": {
                    "vhdContainers": [
                      "[concat('https://', variables('uniqueStringArray')[0], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                      "[concat('https://', variables('uniqueStringArray')[1], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                      "[concat('https://', variables('uniqueStringArray')[2], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                      "[concat('https://', variables('uniqueStringArray')[3], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                      "[concat('https://', variables('uniqueStringArray')[4], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]"
                    ],
                     "name": "[variables('osDiskName')]",
                     "caching": "ReadOnly",
                     "createOption": "FromImage"
                  },
                  "imageReference": "[variables('imageReference')]"
               },
               "osProfile": {
                  "computerNamePrefix": "[variables('dbvmssName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                     "provisionVMAgent": "true"
                  }
               },
               "networkProfile": {
                  "networkInterfaceConfigurations": [
                     {
                        "name": "[concat('db', variables('nicName'))]",
                        "properties": {
                           "primary": "true",
                           "ipConfigurations": [
                              {
                                 "name": "[concat( 'db',variables('ipConfigName'))]",
                                 "properties": {
                                    "subnet": {
                                       "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
                                    },
                                    "loadBalancerBackendAddressPools": [
                                       {
                                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('dbloadBalancerName'), '/backendAddressPools/', variables('dbbePoolName'))]"
                                       }
                                    ]
                                 }
                              }
                           ]
                        }
                     }
                  ]
               },
               "extensionProfile": {
                  "extensions": [
                     {
                        "name": "FirstInstall",
                        "properties": {
                           "publisher": "Microsoft.Compute",
                           "type": "CustomScriptExtension",
                           "typeHandlerVersion": "[variables('customScriptExtensionVersion')]",
                           "autoUpgradeMinorVersion": "true",
                           "forceUpdateTag": "[concat( parameters('installMSI'),parameters('updateMSI'),parameters('triggerWebConfig'),parameters('UninstallMSI'),parameters('fixLicense'))]",
                           "settings": {
                              "fileUris": [ "[variables('gitRefreshUri')]" ],
                              "commandToExecute": "[concat('powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {pushd;./',variables('gitRefreshName'), ' ', parameters('gitBranch'), ';popd;', 'pushd;c:\\lansa\\scripts\\azure-custom-script.ps1 ', '-server_name \"', reference(variables('sqlserverName')).fullyQualifiedDomainName, '\"', ' -DBUT \"SQLAZURE\"',  ' -dbname \"', parameters('databaseName'), '\"', ' -dbuser \"', parameters('databaseLogin'), '\"', ' -dbpassword \"', parameters('databaseLoginPassword'), '\"', ' -webuser \"', parameters('webUsername'), '\"', ' -webpassword \"', parameters('webPassword'), '\"', ' -MSIuri \"', parameters('msiUri'), '\"',  ' -maxconnections \"', parameters('webServerMaxConnect'), '\"', ' -trace \"', parameters('trace'), '\"', ' -installMSI \"', parameters('installMSI'), '\"', ' -updateMSI \"', parameters('updateMSI'), '\"',' -triggerWebConfig \"', parameters('triggerWebConfig'), '\"',' -UninstallMSI \"', parameters('UninstallMSI'), '\"', ' -fixLicense \"', parameters('fixLicense'), '\"', ';if ($LASTEXITCODE -ne 0) {Write-Error (\"MSI Install failed\");exit $LASTEXITCODE}; exit 0;popd;}\"')]"
                           }
                        }
                     }
                  ]
               }
            }
         }
      },
      {
         "type": "Microsoft.Insights/autoscaleSettings",
         "apiVersion": "[variables('insightsApiVersion')]",
         "name": "autoscalewaddb",
         "location": "[resourceGroup().location]",
         "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('dbvmssName'))]"
         ],
         "properties": {
            "name": "autoscalewaddb",
            "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('dbvmssName'))]",
            "enabled": true,
            "profiles": [
               {
                  "name": "Profile1",
                  "capacity": {
                     "minimum": "1",
                     "maximum": "1",
                     "default": "1"
                  }
               }
            ]
         }
      },
      {
         "type": "Microsoft.Compute/virtualMachineScaleSets",
         "name": "[variables('namingInfix')]",
         "location": "[resourceGroup().location]",
         "apiVersion": "[variables('computeApiVersion')]",
         "dependsOn": [
            "storageLoop",
            "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
            "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
            "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
            "[concat('Microsoft.Sql/servers/', variables('sqlserverName'))]",
            "[concat('Microsoft.Sql/servers/', variables('sqlserverName'), '/databases/', parameters('databaseName'))]",
            "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('dbvmssName'))]"
         ],
         "sku": {
            "name": "[parameters('vmSku')]",
            "tier": "Standard",
            "capacity": "[parameters('minInstanceCount')]"
         },
         "plan": {
            "name": "[variables('imageSKU')]",
            "product": "[parameters('imageOffer')]",
            "publisher": "[variables('imagePublisher')]"
         },
         "properties": {
            "overprovision": "false",
            "upgradePolicy": {
               "mode": "Automatic"
            },
            "virtualMachineProfile": {
               "storageProfile": {
                  "osDisk": {
                    "vhdContainers": [
                      "[concat('https://', variables('uniqueStringArray')[0], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                      "[concat('https://', variables('uniqueStringArray')[1], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                      "[concat('https://', variables('uniqueStringArray')[2], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                      "[concat('https://', variables('uniqueStringArray')[3], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                      "[concat('https://', variables('uniqueStringArray')[4], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]"
                    ],
                     "name": "[variables('osDiskName')]",
                     "caching": "ReadOnly",
                     "createOption": "FromImage"
                  },
                  "imageReference": "[variables('imageReference')]"
               },
               "osProfile": {
                  "computerNamePrefix": "[variables('namingInfix')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                     "provisionVMAgent": "true"
                  }
               },
               "networkProfile": {
                  "networkInterfaceConfigurations": [
                     {
                        "name": "[variables('nicName')]",
                        "properties": {
                           "primary": "true",
                           "ipConfigurations": [
                              {
                                 "name": "[variables('ipConfigName')]",
                                 "properties": {
                                    "subnet": {
                                       "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
                                    },
                                    "loadBalancerBackendAddressPools": [
                                       {
                                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('bePoolName'))]"
                                       }
                                    ],
                                    "loadBalancerInboundNatPools": [
                                       {
                                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('natPoolName'))]"
                                       }
                                    ]
                                 }
                              }
                           ]
                        }
                     }
                  ]
               },
               "extensionProfile": {
                  "extensions": [
                     {
                        "name": "Microsoft.Insights.VMDiagnosticsSettings",
                        "properties": {
                           "publisher": "Microsoft.Azure.Diagnostics",
                           "type": "IaaSDiagnostics",
                           "typeHandlerVersion": "1.7",
                           "autoUpgradeMinorVersion": true,
                           "settings": {
                              "xmlCfg": "[base64(concat(variables('wadcfgxstart'),variables('wadmetricsresourceid'),variables('wadcfgxend')))]",
                              "storageAccount": "[variables('diagnosticsStorageAccountName')]"
                           },
                           "protectedSettings": {
                              "storageAccountName": "[variables('diagnosticsStorageAccountName')]",
                              "storageAccountKey": "[listkeys(variables('accountid'), variables('storageApiVersion')).key1]",
                              "storageAccountEndPoint": "https://core.windows.net"
                           }
                        }
                     },
                     {
                        "name": "Microsoft.Compute.CustomScriptExtension",
                        "properties": {
                           "publisher": "Microsoft.Compute",
                           "type": "CustomScriptExtension",
                           "typeHandlerVersion": "1.8",
                           "autoUpgradeMinorVersion": "true",
                           "forceUpdateTag": "[concat( parameters('installMSI'),parameters('updateMSI'),parameters('triggerWebConfig'),parameters('UninstallMSI'),parameters('fixLicense'))]",
                           "settings": {
                              "fileUris": [ "[variables('gitRefreshUri')]" ],
                              "commandToExecute": "[concat('powershell -NoProfile -ExecutionPolicy unrestricted -command \"& {pushd;./',variables('gitRefreshName'), ' ', parameters('gitBranch'), ';popd;', 'pushd;c:\\lansa\\scripts\\azure-custom-script.ps1 ', '-SUDB \"0\" -server_name \"', reference(variables('sqlserverName')).fullyQualifiedDomainName, '\"', ' -DBUT \"SQLAZURE\"',  ' -dbname \"', parameters('databaseName'), '\"', ' -dbuser \"', parameters('databaseLogin'), '\"', ' -dbpassword \"', parameters('databaseLoginPassword'), '\"', ' -webuser \"', parameters('webUsername'), '\"', ' -webpassword \"', parameters('webPassword'), '\"', ' -MSIuri \"', parameters('msiUri'), '\"',  ' -maxconnections \"', parameters('webServerMaxConnect'), '\"', ' -trace \"', parameters('trace'), '\"', ' -installMSI \"', parameters('installMSI'), '\"', ' -updateMSI \"', parameters('updateMSI'), '\"',' -triggerWebConfig \"', parameters('triggerWebConfig'), '\"', ' -UninstallMSI \"', parameters('UninstallMSI'), '\"', ' -fixLicense \"', parameters('fixLicense'), '\"',  ';if ($LASTEXITCODE -ne 0) {Write-Error (\"MSI Install failed\");exit $LASTEXITCODE}; exit 0;popd;}\"')]"
                           }
                        }
                     }
                  ]
               }
            }
         }
      },
      {
         "type": "Microsoft.Insights/autoscaleSettings",
         "apiVersion": "[variables('insightsApiVersion')]",
         "name": "autoscalewad",
         "location": "[resourceGroup().location]",
         "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]"
         ],
         "properties": {
            "name": "autoscalewad",
            "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]",
            "enabled": true,
            "profiles": [
               {
                  "name": "Profile1",
                  "capacity": {
                     "minimum": "[parameters('minInstanceCount')]",
                     "maximum": "[parameters('maxInstanceCount')]",
                     "default": "[parameters('minInstanceCount')]"
                  },
                  "rules": [
                     {
                        "metricTrigger": {
                           "metricName": "\\Processor(_Total)\\% Processor Time",
                           "metricNamespace": "",
                           "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]",
                           "timeGrain": "PT1M",
                           "statistic": "Average",
                           "timeWindow": "PT5M",
                           "timeAggregation": "Average",
                           "operator": "GreaterThan",
                           "threshold": 60.0
                        },
                        "scaleAction": {
                           "direction": "Increase",
                           "type": "PercentChangeCount",
                           "value": "10",
                           "cooldown": "PT20M"
                        }
                     },
                     {
                        "metricTrigger": {
                           "metricName": "\\Processor(_Total)\\% Processor Time",
                           "metricNamespace": "",
                           "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('namingInfix'))]",
                           "timeGrain": "PT1M",
                           "statistic": "Average",
                           "timeWindow": "PT5M",
                           "timeAggregation": "Average",
                           "operator": "LessThan",
                           "threshold": 30.0
                        },
                        "scaleAction": {
                           "direction": "Decrease",
                           "type": "ChangeCount",
                           "value": "1",
                           "cooldown": "PT5M"
                        }
                     }
                  ]
               }
            ]
         }
      },
      {
         "name": "[variables('sqlserverName')]",
         "type": "Microsoft.Sql/servers",
         "location": "[resourceGroup().location]",
         "dependsOn": [
            "storageLoop",
            "[concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
            "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
            "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
         ],
         "tags": {
            "displayName": "SqlServer"
         },
         "apiVersion": "2014-04-01-preview",
         "properties": {
            "administratorLogin": "[parameters('databaseLogin')]",
            "administratorLoginPassword": "[parameters('databaseLoginPassword')]",
            "version": "12.0"
         },
         "resources": [
            {
               "name": "[parameters('databaseName')]",
               "type": "databases",
               "location": "[resourceGroup().location]",
               "tags": {
                  "displayName": "Database"
               },
               "apiVersion": "2014-04-01-preview",
               "dependsOn": [
                  "[variables('sqlserverName')]"
               ],
               "properties": {
                  "edition": "[parameters('edition')]",
                  "collation": "[parameters('collation')]",
                  "maxSizeBytes": "[parameters('maxSizeBytes')]",
                  "requestedServiceObjectiveName": "[parameters('requestedServiceObjectiveName')]"
               }
            },
            {
               "type": "firewallrules",
               "apiVersion": "2014-04-01-preview",
               "dependsOn": [
                  "[variables('sqlserverName')]"
               ],
               "location": "[resourceGroup().location]",
               "name": "AllowAllWindowsAzureIps",
               "properties": {
                  "endIpAddress": "0.0.0.0",
                  "startIpAddress": "0.0.0.0"
               }
            }
         ]
      }

   ],
   "outputs": {
      "dbServerName": {
         "type": "string",
         "value": "[reference(variables('sqlserverName')).fullyQualifiedDomainName]"
      },
      "dbName": {
         "type": "string",
         "value": "[parameters('databaseName')]"
      },
      "lbFqdn": {
         "type": "string",
         "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
      },
      "dbrdpAddress": {
         "type": "string",
         "value": "[concat(reference(variables('dbpublicIPAddressName')).dnsSettings.fqdn, ':50000')]"
      },
      "rdpAddress": {
         "type": "string",
         "value": "[concat(reference(variables('publicIPAddressName')).dnsSettings.fqdn, ':50000')]"
      }
   }
}
