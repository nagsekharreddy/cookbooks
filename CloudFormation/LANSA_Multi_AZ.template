{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description"              : "Template LANSA_Multi_AZ: This template installs a highly-available, scalable LANSA deployment using a multi-AZ Amazon RDS database instance for storage.  **WARNING** This template creates an Amazon EC2 instance, an Elastic Load Balancer and an Amazon RDS database instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters"               : {
        "KeyName" : {
            "Default" : "Linux-keypair",
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances (case sensitive)",
            "Type"        : "String"
        },
        "CompileInstanceType" : {
            "Description" : "Compiler EC2 instance type",
            "Type"        : "String",
            "Default"     : "m3.medium",
            "AllowedValues" : [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "hs1.8xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "c1.medium",
                "c1.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge",
                "t1.micro"
            ],
            "ConstraintDescription" : "Must be a valid EC2 instance type."
        },
        "WebServerInstanceType" : {
            "Description" : "WebServer EC2 instance type",
            "Type"        : "String",
            "Default"     : "m3.medium",
            "AllowedValues" : [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "hs1.8xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "c1.medium",
                "c1.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge",
                "t1.micro"
            ],
            "ConstraintDescription" : "Must be a valid EC2 instance type."
        },
        "DBClass"      : {
            "Default" : "db.m3.medium",
            "Description" : "Database instance class",
            "Type"        : "String",
            "AllowedValues" : [
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.m3.medium",
                "db.m3.large",
                "db.m3.xlarge",
                "db.m3.2xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge",
                "db.m2.xlarge",
                "db.m2.2xlarge",
                "db.m2.4xlarge",
                "db.m1.small",
                "db.m1.medium",
                "db.m1.large",
                "db.m1.xlarge",
                "db.t1.micro"
            ],
            "ConstraintDescription" : "Must select a valid database instance type."
        },
        "DBName"       : {
            "Default" : "lansa",
            "Description" : "LANSA database name",
            "Type"        : "String",
            "MinLength"   : "1",
            "MaxLength"   : "64",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "Must begin with a letter and contain only alphanumeric characters. Max length 64"
        },
        "DBUsername"   : {
            "Default" : "admin",
            "NoEcho"  : "true",
            "Description" : "The LANSA database admin account username",
            "Type"        : "String",
            "MinLength"   : "1",
            "MaxLength"   : "16",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "Must begin with a letter and contain only alphanumeric characters. Max length 16"
        },
        "DBPassword"   : {
            "Default" : "password",
            "NoEcho"  : "true",
            "Description" : "LANSA database admin account password",
            "Type"        : "String",
            "MinLength"   : "8",
            "MaxLength"   : "41",
            "AllowedPattern" : "[a-zA-Z0-9]*",
            "ConstraintDescription" : "Must contain only alphanumeric characters. Min length 8, max length 41"
        },
        "MultiAZDatabase" : {
            "Default" : "false",
            "Description" : "Create a multi-AZ MySQL Amazon RDS database instance",
            "Type"        : "String",
            "AllowedValues" : [
                "true",
                "false"
            ],
            "ConstraintDescription" : "Must be either true or false."
        },
        "WebServerCapacity" : {
            "Default" : "1",
            "Description" : "The initial number of WebServer instances",
            "Type"        : "Number",
            "MinValue"    : "1",
            "MaxValue"    : "50",
            "ConstraintDescription" : "Must be between 1 and 50 EC2 instances."
        },
        "DBAllocatedStorage" : {
            "Default" : "50",
            "Description" : "The size of the database (GB)",
            "Type"        : "Number",
            "MinValue"    : "5",
            "MaxValue"    : "3072",
            "ConstraintDescription" : "Must be between 5 and 3072 GB."
        },
        "SSHLocation"        : {
            "Description" : " The IP address range that can be used to SSH to the EC2 instances",
            "Type"        : "String",
            "MinLength"   : "9",
            "MaxLength"   : "18",
            "Default"     : "61.88.115.254/32",
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "ELBTimeout"         : {
            "Description" : " Time to wait for a response from the application. Health check interval and Apache timeouts are based on this time too.",
            "Type"        : "Number",
            "MinValue"    : "2",
            "MaxValue"    : "60",
            "Default"     : "30",
            "ConstraintDescription" : "Must be between 2 and 60"
        }
    },
    "Mappings"                 : {
         "AWSInstanceType2Arch" : {
            "t1.micro" : { "Arch" : "PV64" },
            "t2.micro" : { "Arch" : "HVM64" },
            "t2.small" : { "Arch" : "HVM64" },
            "t2.medium" : { "Arch" : "HVM64" },
            "m1.small" : { "Arch" : "PV64" },
            "m1.medium" : { "Arch" : "PV64" },
            "m1.large" : { "Arch" : "PV64" },
            "m1.xlarge" : { "Arch" : "PV64" },
            "m2.xlarge" : { "Arch" : "PV64" },
            "m2.2xlarge" : { "Arch" : "PV64" },
            "m2.4xlarge" : { "Arch" : "PV64" },
            "m3.medium" : { "Arch" : "PV64" },
            "m3.large" : { "Arch" : "PV64" },
            "m3.xlarge" : { "Arch" : "PV64" },
            "m3.2xlarge" : { "Arch" : "PV64" },
            "c1.medium" : { "Arch" : "PV64" },
            "c1.xlarge" : { "Arch" : "PV64" },
            "c3.large" : { "Arch" : "PV64" },
            "c3.xlarge" : { "Arch" : "PV64" },
            "c3.2xlarge" : { "Arch" : "PV64" },
            "c3.4xlarge" : { "Arch" : "PV64" },
            "c3.8xlarge" : { "Arch" : "PV64" },
            "g2.2xlarge" : { "Arch" : "HVMG2" },
            "r3.large" : { "Arch" : "HVM64" },
            "r3.xlarge" : { "Arch" : "HVM64" },
            "r3.2xlarge" : { "Arch" : "HVM64" },
            "r3.4xlarge" : { "Arch" : "HVM64" },
            "r3.8xlarge" : { "Arch" : "HVM64" },
            "i2.xlarge" : { "Arch" : "HVM64" },
            "i2.2xlarge" : { "Arch" : "HVM64" },
            "i2.4xlarge" : { "Arch" : "HVM64" },
            "i2.8xlarge" : { "Arch" : "HVM64" },
            "hi1.4xlarge" : { "Arch" : "PV64" },
            "hs1.8xlarge" : { "Arch" : "PV64" },
            "cr1.8xlarge" : { "Arch" : "HVM64" },
            "cc2.8xlarge" : { "Arch" : "HVM64" },
            "cg1.4xlarge" : { "Arch" : "HVMGPU" }        
        },
         "AWSRegionArch2AMI"    : {
            "us-east-1" : {
                "PV64" : "ami-1b814f72",
                "HVM64" : "ami-0da96764"
            },
            "us-west-2" : {
                "PV64" : "ami-30fe7300",
                "HVM64" : "NOT_YET_SUPPORTED"
            },
            "us-west-1" : {
                "PV64" : "ami-1bd68a5e",
                "HVM64" : "NOT_YET_SUPPORTED"
            },
            "eu-west-1" : {
                "PV64" : "ami-953b06e1",
                "HVM64" : "NOT_YET_SUPPORTED"
            },
            "ap-southeast-1" : {
                "PV64" : "ami-beb0caec",
                "HVM64" : "NOT_YET_SUPPORTED"
            },
            "ap-southeast-2" : {
                "PV64" : "ami-bd990e87",
                "HVM64" : "ami-b5990e8f"
            },
            "ap-northeast-1" : {
                "PV64" : "ami-0a44f00b",
                "HVM64" : "NOT_YET_SUPPORTED"
            },
            "sa-east-1"      : {
                "PV64" : "ami-3c3be421",
                "HVM64" : "NOT_YET_SUPPORTED"
            }
        }
    },
    "Resources"                : {
         "CfnUser"             : {
           "Type" : "AWS::IAM::User",
           "Properties" : {
             "Path": "/",
             "Policies": [
         {
            "PolicyName": "Admin",
            "PolicyDocument": 
	         { "Statement": [
	           {
        	           "Effect":"Allow",
                       "Action":"*",
                       "Resource":"*"
									         }
								         ]}			
               }
							         ]
           }
         },
         "HostKeys"            : {
           "Type" : "AWS::IAM::AccessKey",
           "Properties" : {
             "UserName" : {"Ref": "CfnUser"}
           }
         },

         "CompileELB"          : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Metadata" : {
                "Comment1" : "Configure the Load Balancer with a simple health check and cookie-based stickiness",
                "Comment2" : "Use install path for healthcheck to avoid redirects. Refer to LANSA report to place the right tag here for health check - ELB healthcheck does not handle 302 return codes"
            },
            "Properties" : {
                "AvailabilityZones" : {
                    "Fn::GetAZs" : ""
                },
                "LBCookieStickinessPolicy" : [
                    {
                        "PolicyName" : "CookieBasedPolicy",
                        "CookieExpirationPeriod" : "600"
                    }
                ],
                "Listeners"                : [
                    {
                        "LoadBalancerPort" : "80",
                        "InstancePort"     : "80",
                        "Protocol"         : "HTTP",
                        "PolicyNames"      : [
                            "CookieBasedPolicy"
                        ]
                    }
                ],
                "HealthCheck"              : {
                    "Target" : "HTTP:80/cgi-bin/lansaweb?about",
                    "HealthyThreshold" : "3",
                    "UnhealthyThreshold" : "5",
                    "Interval"           : "90",
                    "Timeout"            : {
                        "Ref" : "ELBTimeout"
                    }
                }
            }
        },
         "CompileGroup"        : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AvailabilityZones" : {
                    "Fn::GetAZs" : ""
                },
                "LaunchConfigurationName" : {
                    "Ref" : "LaunchCompile"
                },
                "MinSize"                 : "1",
                "MaxSize"                 : "1",
                "DesiredCapacity"         : "1",
                "LoadBalancerNames"       : [ { "Ref" : "CompileELB" } ],
                "Tags" : [ {
                        "Key" : "Name",
                        "Value" : "Compile Instance",
                        "PropagateAtLaunch" : "true"
                     } ]
            }
         },
         "LaunchCompile"       : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "httpd" : [],
                                "git"   : [],
                                "php"   : [],
                                "mysql-connector-odbc.x86_64" : []
                            }
                        },
                        "groups"  : {
                           "lansa" : {}
                        },

                        "sources"  : {
                        },

                        "files"    : {
                          "/etc/odbc.ini" : {
                            "content" : { "Fn::Join" : ["", [
                                 "[myodbc]\n",
                                 "Driver         = MySQL\n",
                                 "Description  = Connector/ODBC 3.51 Driver DSN\n",
                                 "SERVER      = ", { "Fn::GetAtt" : ["DBInstance", "Endpoint.Address"] }, "\n",
                                 "PORT          = 3306\n",
                                 "USER          = ", { "Ref" : "DBUsername" }, "\n",
                                 "Password      = ", { "Ref" : "DBPassword" }, "\n",
                                 "Database      = ", { "Ref" : "DBName" }, "\n",
                                 "OPTION        =\n",
                                 "SOCKET        =\n"
                              ]]},
                            "mode"  : "000644",
                            "owner" : "root",
                            "group" : "root"
                          },
		                    "/etc/lansa/userdata.pl" : { 
		                     "source" : { "Fn::Join" : ["", ["https://s3-ap-southeast-2.amazonaws.com/lansa/scripts/userdata.pl"]]},
                            "mode"   : "000777", 
		                      "owner"  : "root",
		                      "group"  : "root",
	                         "authentication" : "S3AccessCreds"		                    
                          }
                        },
                        "commands"  : {
                        },
                        "services" : {
                            "sysvinit" : {
                                "httpd"    : { "enabled" : "true",  "ensureRunning" : "true" },
                                "sendmail" : { "enabled" : "false", "ensureRunning" : "false" }
                            }
                        }
                    }
                },

               "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
		               "type" : "S3",
		               "accessKeyId" : { "Ref" : "HostKeys" },
		               "secretKey" : {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]},
		               "buckets" : [ "lansa" ]
                     }
               }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "CompileInstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "CompileInstanceType"
                },
                "SecurityGroups" : [
                    {
                        "Ref" : "CompileSecurityGroup"
                    }
                ],
                "KeyName"        : {
                    "Ref" : "KeyName"
                },
                "UserData"       : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" },
                                " -r LaunchCompile ",
                                "         --region ", { "Ref" : "AWS::Region" }, "\n",
                                "perl /etc/lansa/userdata.pl",
                                    " -d ", { "Ref" : "DBName" },
                                    " -p ", { "Ref" : "DBPassword" },
                                    " -r ", { "Ref" : "AWS::Region" },
                                    " -s ", { "Ref" : "AWS::StackId" },
                                    " -t ", "Compile",
                                    " -u ", { "Ref" : "DBUsername" },
                                    " -w \"", { "Ref" : "CompileWaitHandle" }, "\"\n"
                            ]
                        ]
                    }
                }
            }
        },
         "CompileWaitHandle"          : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
         "CompileWaitCondition"       : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "CompileGroup",
            "Properties" : {
                "Handle"   : { "Ref" : "CompileWaitHandle" },
                "Timeout"  : "3000",
                "Count"    : 1
            }
        },

         "WebServerELB"        : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Metadata" : {
                "Comment1" : "Configure the Load Balancer with a simple health check and cookie-based stickiness",
                "Comment2" : "Use install path for healthcheck to avoid redirects. Refer to LANSA report to place the right tag here for health check - ELB healthcheck does not handle 302 return codes"
            },
            "Properties" : {
                "AvailabilityZones" : {
                    "Fn::GetAZs" : ""
                },
                "LBCookieStickinessPolicy" : [
                    {
                        "PolicyName" : "CookieBasedPolicy",
                        "CookieExpirationPeriod" : "600"
                    }
                ],
                "Listeners"                : [
                    {
                        "LoadBalancerPort" : "80",
                        "InstancePort"     : "80",
                        "Protocol"         : "HTTP",
                        "PolicyNames"      : [ "CookieBasedPolicy" ]
                    }
                ],
                "HealthCheck"              : {
                    "Target" : "HTTP:80/cgi-bin/lansaweb?about",
                    "HealthyThreshold" : "3",
                    "UnhealthyThreshold" : "5",
                    "Interval"           : "90",
                    "Timeout"            : {
                        "Ref" : "ELBTimeout"
                    }
                }
            }
         },
         "WebServerGroup"      : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AvailabilityZones" : {
                    "Fn::GetAZs" : ""
                },
                "LaunchConfigurationName" : {
                    "Ref" : "LaunchWebServer"
                },
                "MinSize"                 : "1",
                "MaxSize"                 : "50",
                "DesiredCapacity"         : {
                    "Ref" : "WebServerCapacity"
                },
                "LoadBalancerNames"       : [ { "Ref" : "WebServerELB" } ],
                "Tags" : [ {
                        "Key" : "Name",
                        "Value" : "Web Server Instance",
                        "PropagateAtLaunch" : "true"
                     } ]

            }
        },
         "LaunchWebServer"     : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                            "yum" : {
                                "httpd" : [],
                                "git"   : [],
                                "php"   : [],
                                "mysql-connector-odbc.x86_64" : []
                            }
                        },
                        "groups"  : {
                           "lansa" : {}
                        },

                        "sources"  : {
                        },

                        "files"    : {
                          "/etc/odbc.ini" : {
                            "content" : { "Fn::Join" : ["", [
                                 "[myodbc]\n",
                                 "Driver         = MySQL\n",
                                 "Description  = Connector/ODBC 3.51 Driver DSN\n",
                                 "SERVER      = ", { "Fn::GetAtt" : ["DBInstance", "Endpoint.Address"] }, "\n",
                                 "PORT          = 3306\n",
                                 "USER          = ", { "Ref" : "DBUsername" }, "\n",
                                 "Password      = ", { "Ref" : "DBPassword" }, "\n",
                                 "Database      = ", { "Ref" : "DBName" }, "\n",
                                 "OPTION        =\n",
                                 "SOCKET        =\n"
                              ]]},
                            "mode"  : "000644",
                            "owner" : "root",
                            "group" : "root"
                          },
		                    "/etc/lansa/userdata.pl" : { 
		                     "source" : { "Fn::Join" : ["", ["https://s3-ap-southeast-2.amazonaws.com/lansa/scripts/userdata.pl"]]},
                            "mode"   : "000777", 
		                      "owner"  : "root",
		                      "group"  : "root",
	                         "authentication" : "S3AccessCreds"		                    
                          }
                        },
                        "commands"  : {
                        },
                        "Metadata" : {
                            "Comment1" : "Sendmail is required for acknowledging the status of the auto-pull request"
                        },
                        "services" : {
                            "sysvinit" : {
                                "httpd" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true"
                                },
                                "sendmail" : {
                                    "enabled" : "true",
                                    "ensureRunning" : "true"
                                }
                            }
                        }
                    }
                },

               "AWS::CloudFormation::Authentication" : {
                    "S3AccessCreds" : {
		               "type" : "S3",
		               "accessKeyId" : { "Ref" : "HostKeys" },
		               "secretKey" : {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]},
		               "buckets" : [ "lansa" ]
                     }
               }
            },
            "Properties" : {
                "ImageId" : {
                    "Fn::FindInMap" : [
                        "AWSRegionArch2AMI",
                        {
                            "Ref" : "AWS::Region"
                        },
                        {
                            "Fn::FindInMap" : [
                                "AWSInstanceType2Arch",
                                {
                                    "Ref" : "WebServerInstanceType"
                                },
                                "Arch"
                            ]
                        }
                    ]
                },
                "InstanceType" : {
                    "Ref" : "WebServerInstanceType"
                },
                "SecurityGroups" : [
                    {
                        "Ref" : "WebServerSecurityGroup"
                    }
                ],
                "KeyName"        : {
                    "Ref" : "KeyName"
                },
                "UserData"       : {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" },
                                " -r LaunchWebServer ",
                                "         --region ", { "Ref" : "AWS::Region" }, "\n",
                                "perl /etc/lansa/userdata.pl",
                                    " -d ", { "Ref" : "DBName" },
                                    " -p ", { "Ref" : "DBPassword" },
                                    " -r ", { "Ref" : "AWS::Region" },
                                    " -s ", { "Ref" : "AWS::StackId" },
                                    " -t ", "WebServer",
                                    " -u ", { "Ref" : "DBUsername" },
                                    " -w \"", { "Ref" : "WaitHandle" }, "\"\n"
                            ]
                        ]
                    }
                }
            }
         },
         "WaitHandle"          : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
         "WaitCondition"       : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : "WebServerGroup",
            "Properties" : {
                "Handle"   : { "Ref" : "WaitHandle" },
                "Timeout"  : "3000",
                "Count"    : { "Ref" : "WebServerCapacity" }
            }
        },

         "DBInstance"          : {
            "Type" : "AWS::RDS::DBInstance",
            "Properties" : {
                "DBName" : {
                    "Ref" : "DBName"
                },
                "Engine" : "MySQL",
                "MultiAZ" : {
                    "Ref" : "MultiAZDatabase"
                },
                "MasterUsername" : {
                    "Ref" : "DBUsername"
                },
                "DBInstanceClass" : {
                    "Ref" : "DBClass"
                },
                "DBSecurityGroups" : [
                    {
                        "Ref" : "DBSecurityGroup"
                    }
                ],
                "AllocatedStorage" : {
                    "Ref" : "DBAllocatedStorage"
                },
                "MasterUserPassword" : {
                    "Ref" : "DBPassword"
                },
                "Tags"               : [
                    {
                        "Key" : "Network",
                        "Value" : "Private"
                    }
                ]
            }
        },
         "DBSecurityGroup"     : {
            "Type" : "AWS::RDS::DBSecurityGroup",
            "Properties" : {
                "DBSecurityGroupIngress" : {
                    "EC2SecurityGroupName" : {
                        "Ref" : "WebServerSecurityGroup"
                    }
                },
                "GroupDescription"       : "Frontend Access"
            }
        },
         "CompileSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "SourceSecurityGroupOwnerId" : {
                            "Fn::GetAtt" : [
                                "CompileELB",
                                "SourceSecurityGroup.OwnerAlias"
                            ]
                        },
                        "SourceSecurityGroupName"    : {
                            "Fn::GetAtt" : [
                                "CompileELB",
                                "SourceSecurityGroup.GroupName"
                            ]
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "22",
                        "ToPort"     : "22",
                        "CidrIp"     : {
                            "Ref" : "SSHLocation"
                        }
                    }
                ]
            }
        },
         "WebServerSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "80",
                        "ToPort"     : "80",
                        "SourceSecurityGroupOwnerId" : {
                            "Fn::GetAtt" : [
                                "WebServerELB",
                                "SourceSecurityGroup.OwnerAlias"
                            ]
                        },
                        "SourceSecurityGroupName"    : {
                            "Fn::GetAtt" : [
                                "WebServerELB",
                                "SourceSecurityGroup.GroupName"
                            ]
                        }
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : "22",
                        "ToPort"     : "22",
                        "CidrIp"     : {
                            "Ref" : "SSHLocation"
                        }
                    }
                ]
            }
        }
    },
    "Outputs"                  : {
         "WebsiteURL" : {
            "Value" : { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "WebServerELB", "DNSName" ]  } ] ] },
            "Description" : "LANSA App Website"
        },
         "CompileWebsiteURL" : {
            "Value" : { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "CompileELB", "DNSName" ]  } ] ] },
            "Description" : "LANSA Compile Website"
        },
         "WebServerResult" : {
            "Value" : { "Fn::GetAtt" : [ "WaitCondition", "Data" ]},
            "Description" : "The data passed back as part of signalling the WaitCondition."
        },
         "CompileResult" : {
            "Value" : { "Fn::GetAtt" : [ "CompileWaitCondition", "Data" ]},
            "Description" : "The data passed back as part of signalling the WaitCondition."
        }
    }
}